name: Build and Push Docker Image

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
       # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # step 2///////////////////////
      # Set up environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip3 install -r BE/requirements.txt
      
      # Start REST API
      - name: Start REST API
        run: |
          python3 BE/calculator.py --rest &
      
      - name: Wait for API to be ready
        run: |
          sleep 10  # Adjust as needed to ensure the API is up
      
      # Run tests
      - name: Run tests
        id: run-tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE/BE
          pytest --junit-xml=report.xml
      
      # Publishes a test report in JUnit format
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/report.xml'
          token: ${{ github.token }}
          include_passed: true  # Include passed tests in the report
      #/////////////////////////////////

      # Step 3: Log in to the Azure Container Registry
      - name: Login to Azure Container Registry
        if: success() # Only proceed if previous steps were successful
        uses: docker/login-action@v2
        with:
          registry: judevops.azurecr.io
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      # Step 4: Build and push the Docker image
      - name: Build and push Docker image
        if: success()  # Only proceed if previous steps were successful
        run: |
          docker build -t judevops.azurecr.io/amela_music-calculator -f BE/Dockerfile BE
          docker push judevops.azurecr.io/amela_music-calculator